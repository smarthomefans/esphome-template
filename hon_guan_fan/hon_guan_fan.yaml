# 定义替换变量方便修改迁移
substitutions:
  devicename: 'hon_guan_fan'
  wifi_ssid: !secret wifi_ssid
  wifi_password: !secret wifi_password
  api_password: !secret api_password
  ota_password: !secret ota_password
  hotport_ssid: !secret hotport_ssid
  hotport_password: !secret hotport_password
  
esphome:
  name: $devicename
  platform: ESP8266
  board: esp12e
  # 开机运行
  on_boot:
    - light.turn_on: 
        id: state_light
        red: 0%
        green: 0%
        blue: 100%

wifi:
  ssid: $wifi_ssid
  password: $wifi_password
  ap:
    ssid: $hotport_ssid
    password: $hotport_password
captive_portal:
    
# Enable logging
logger:

# Enable Home Assistant API
api:
  password: $api_password
  reboot_timeout: 0s

# web_server:
#   port: 80

ota:
  password: $ota_password

# 开关面板指示灯
light:
  - platform: fastled_clockless
    chipset: WS2812
    pin: GPIO4
    num_leds: 1
    rgb_order: GRB
    name: "HG_StateLED"
    id: "state_light"
  # 利用空的引脚虚拟 rgb 颜色用来选择
  # ON 的按钮颜色
  - platform: fastled_clockless
    chipset: WS2812
    name: "${devicename}_on_color_light"
    pin: GPIO14
    num_leds: 1
    rgb_order: GRB
    id: "on_color"
    # OFF 的按钮颜色
  - platform: fastled_clockless
    chipset: WS2812
    name: "${devicename}_off_color_light"
    pin: GPIO16
    num_leds: 1
    rgb_order: GRB
    id: "off_color"

binary_sensor:
  # 检查继电器状态作为 switch 反馈使用
  - platform: gpio
    pin: GPIO12
    id: CH1_state
    internal: true
  # 检查继电器状态作为 switch 反馈使用
  - platform: gpio
    pin: GPIO13
    id: CH2_state
    internal: true

  # GPIO0 接物理按钮
  - platform: gpio
    internal: true
    pin: GPIO0
    name: "Fan Button"
    # 按钮必须翻转才能使用 click 模式
    filters:
      - invert:
    # 多 click 模式
    on_multi_click:
    # 双击切换速度
    - timing:
        - ON for at most 1s
        - OFF for at most 1s
        - ON for at most 1s
        - OFF for at least 0.2s
      then:
        - switch.toggle: fan_speed_button
    # 单击切换电源
    - timing:
        - ON for at most 0.5s
        - OFF for at least 0.1s
      then:
        - switch.toggle: fan_power_button
    # 双击切换速度及次数，这里是按8次重启
    - timing:
        - ON for at most 1s
        - OFF for at most 1s
        - ON for at most 1s
        - OFF for at most 1s
        - ON for at most 1s
        - OFF for at most 1s
        - ON for at most 1s
        - OFF for at most 1s
        - ON for at most 1s
        - OFF for at most 1s
        - ON for at most 1s
        - OFF for at most 1s
        - ON for at most 1s
        - OFF for at most 1s
        - ON for at most 1s
        - OFF for at least 0.2s
      then:
        - switch.turn_on: reboot

# 使用文字传感器显示风机状态,与HA联动
text_sensor:
  # CH1_state false 代表总电源通电，true 代表总电源断开
  - platform: template
    id: fan_state
    name: "Fan Power"
    update_interval: 0s

  # CH2_state是风机档位 false 代表HIGH，true 代表LOW
  - platform: template
    id: fan_speed
    name: "Fan Speed"
    update_interval: 0s

switch:
  # reboot
  - platform: restart
    id: reboot
  # CH1 作为总电源控制风机进电 NO1 接 220V 正，COM1 接 COM2
  - platform: gpio
    pin: GPIO12
    id: relay1
    inverted: true
  # CH2 NC2 接电机 LOW，NO2 接电机 HIGH区分高低档
  - platform: gpio
    pin: GPIO13
    id: relay2
    inverted: true
  # GPIO 默认是隐藏的，故此需要使用 template 来把开关显示出来
  # CH1 作为总开关
  - platform: template
    name: "Fan Power"
    id: fan_power_button
    # template 类型 switch 是需要自定义开启和关闭状态，所以需要使用 binary_sensor 状态来确定开关状态
    lambda: |-
      if (id(CH1_state).state) {
        return false;
      } else {
        return true;
      }
    turn_on_action:
      lambda: |-
        id(relay1).turn_on();
        id(fan_state).publish_state("ON");
        if (id(CH2_state).state)
        {
          id(fan_speed).publish_state("HIGH");
        }
        else
        {
          id(fan_speed).publish_state("LOW");
        }
        float r = id(on_color).current_values.get_red();
        float g = id(on_color).current_values.get_green();
        float b = id(on_color).current_values.get_blue();
        auto rgb_light = id(state_light).turn_on();
        rgb_light.set_transition_length(3000);
        rgb_light.set_rgb(r,g,b);
        rgb_light.perform();
    turn_off_action:
      lambda: |-
        id(relay1).turn_off();
        id(relay2).turn_off();
        id(fan_state).publish_state("OFF");
        id(fan_speed).publish_state("LOW");
        float r = id(off_color).current_values.get_red();
        float g = id(off_color).current_values.get_green();
        float b = id(off_color).current_values.get_blue();
        auto rgb_light = id(state_light).turn_on();
        rgb_light.set_transition_length(3000);
        rgb_light.set_rgb(r,g,b);
        rgb_light.perform();

  # CH2 作为风机档位
  - platform: template
    name: "Fan Speed"
    id: fan_speed_button
    lambda: |-
      if (id(CH2_state).state) {
        return false;
      } else {
        return true;
      } 
    turn_on_action:
      # 高档位强制红色
      lambda: |-
        id(relay2).turn_on();
        id(fan_speed).publish_state("HIGH");
        float r = 1.0;
        float g = 0.0;
        float b = 0.0;
        auto rgb_light = id(state_light).turn_on();
        rgb_light.set_transition_length(3000);
        rgb_light.set_rgb(r,g,b);
        rgb_light.perform();
    turn_off_action:
      lambda: |-
        id(relay2).turn_off();
        id(fan_speed).publish_state("LOW");
        float r = id(on_color).current_values.get_red();
        float g = id(on_color).current_values.get_green();
        float b = id(on_color).current_values.get_blue();
        auto rgb_light = id(state_light).turn_on();
        rgb_light.set_transition_length(3000);
        rgb_light.set_rgb(r,g,b);
        rgb_light.perform();

#/* HomeAssistant config */
# fan:
#   - platform: template
#     fans:
#       hg_fan:
#         value_template: >
#                   {% if is_state("sensor.fan_power", "OFF") %}
#                     off
#                   {% else %}
#                     on
#                   {% endif %}
#         speed_template: '{{ states("sensor.fan_speed") }}'
#         turn_on:
#           - service: switch.turn_on
#             entity_id: switch.fan_power
#         turn_off:
#           - service: switch.turn_off
#             entity_id: switch.fan_power
#         set_speed:
#           service_template: >
#             {% if speed == 'High' %}
#               script.set_fan_speed_to_high
#             {% elif speed == 'Low' %}
#               script.set_fan_speed_to_low
#             {% else %}
#               script.set_fan_speed_to_low
#             {% endif %}
#         speeds:
#           - 'Low'
#           - 'High'
# script:
#   set_fan_speed_to_high:
#     alias: set_fan_speed_to_high
#     sequence:
#     - data:
#         entity_id: switch.fan_speed
#       service: switch.turn_on
#   set_fan_speed_to_low:
#     alias: set_fan_speed_to_low
#     sequence:
#     - data:
#         entity_id: switch.fan_speed
#       service: switch.turn_off